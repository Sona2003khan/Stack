import java.util.*;

public class Stack_next_greater_element2_13 {
    
    public static int[] next_greater_element2(int nums1[], int nums2[]) {
        Stack<Integer> st = new Stack<>();
        Map<Integer, Integer> map = new HashMap<>();

        for (int nums : nums2) {
            while (!st.isEmpty() && nums > st.peek()) {
                map.put(st.pop(), nums);
            }
            st.push(nums);
        }

        while (!st.isEmpty()) {
            map.put(st.pop(), -1);
        }

        int result[] = new int[nums1.length];
        for (int i = 0; i < nums1.length; i++) {
            result[i] = map.get(nums1[i]);
        }
        return result;
    }

    public static void main(String[] args) {
        Stack_next_greater_element2_13 obj = new Stack_next_greater_element2_13();
        int[] nums1 = {4, 1, 2};
        int[] nums2 = {1, 3, 4, 2};

        int[] ans = obj.next_greater_element2(nums1, nums2);
        System.out.println(Arrays.toString(ans)); // [-1, 3, -1]
    }
}

/*
Time Complexity: O(m + n) — Each element in nums2 is pushed and popped at most once, plus O(m) lookups for nums1.
Space Complexity: O(n) — For the stack and the map storing next greater mappings.
*/
