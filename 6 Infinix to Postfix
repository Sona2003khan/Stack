import java.util.Stack;

public class Stack_infix_to_postfix_conversion {

    // Returns precedence of operators
    // Time: O(1), Space: O(1)
    public static int priority(char ch) {
        switch (ch) {
            case '+': case '-': return 1;
            case '*': case '/': return 2;
            case '^': return 3;
        }
        return -1;
    }

    // Converts infix to postfix using stack
    // Time: O(n), Space: O(n)
    public static String infix_to_postfix(String s) {

        StringBuilder sb = new StringBuilder();     // Stores the final postfix result
        Stack<Character> st = new Stack<>();        // Stack to hold operators and brackets

        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);

            // If operand (letter or digit), add to output
            if (Character.isLetterOrDigit(ch)) {
                sb.append(ch);
            }

            // If '(', push to stack
            else if (ch == '(') {
                st.push(ch);
            }

            // If ')', pop till '('
            else if (ch == ')') {
                while (!st.isEmpty() && st.peek() != '(') {
                    sb.append(st.pop());
                }
                st.pop();  // Pop the '('
            }

            // If operator
            else {
                while (!st.isEmpty() && priority(ch) <= priority(st.peek())) {
                    sb.append(st.pop());
                }
                st.push(ch);
            }
        }

        // Pop remaining operators from stack
        while (!st.isEmpty()) {
            sb.append(st.pop());
        }

        return sb.toString();  // Final postfix expression
    }

    public static void main(String[] args) {
        String s = "((A+B)*C-(D-E))^(F+G)";

        String postfix = infix_to_postfix(s);

        System.out.println("Infix:   " + s);
        System.out.println("Postfix: " + postfix); // Output: AB+C*DE-FG+^
    }
}
