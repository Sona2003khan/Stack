import java.util.Stack;

public class Stack_prefix_infix_9 {

    // Function to convert prefix to infix
    public static String Prefix_to_infix(String s) {
        Stack<String> st = new Stack<>();

        // Traverse the string from right to left
        for (int i = s.length() - 1; i >= 0; i--) {
            char ch = s.charAt(i);

            if (Character.isLetterOrDigit(ch)) {
                // Operand: push to stack
                st.push(Character.toString(ch));
            } else {
                // Operator: pop two operands and combine
                String top1 = st.pop();
                String top2 = st.pop();
                String both = "(" + top1 + ch + top2 + ")";
                st.push(both);
            }
        }

        return st.pop(); // Final infix expression
    }

    public static void main(String[] args) {
        String prefix = "+a*-bcd";
        String infix = Prefix_to_infix(prefix);
        System.out.println(infix);  // Output: (a+((b*c)-d))
    }
}

/*
Time Complexity: O(n^2)
- Each character is processed once => O(n)
- But string concatenation inside the loop can lead to O(n^2) in worst case.

Space Complexity: O(n)
- Stack stores at most n/2 expressions.
- Final infix expression size is O(n) due to nested parentheses.
*/
