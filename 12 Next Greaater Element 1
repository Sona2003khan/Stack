import java.util.Arrays;
import java.util.Stack;

public class Stack_next_greater_element1_12 {

    public static int[] next_greater_element(int nums[]){                 //using stack
        int n=nums.length;
        int ans[]=new int[n];
        Stack<Integer> st=new Stack<>();

        for(int i=n-1;i>=0;i--){
            while (!st.isEmpty() && st.peek() <= nums[i]) {
                st.pop();
            }
            if (st.isEmpty()) {
                ans[i]=-1;
            }
            else{
                ans[i]=st.peek();
            }
            st.push(nums[i]);
        }
        return ans;
    }

    /*public static int[] next_greater_element(int nums[]){                      // using brute force
        int n=nums.length;
        int ans[]=new int[n];
        for(int i=0;i<n;i++){
            ans[i]=-1;
            for(int j=i+1;j<n;j++){
                if(nums[i] < nums[j]){
                    ans[i]=nums[j];
                    break;
                }
            }
        }
        return ans;
    }*/

    public static void main(String[] args) {
        int nums[]={1,2,1};
        int ans[]=next_greater_element(nums);
        System.out.println(Arrays.toString(ans));
    }
}

// Time Complexity: O(n)
// Space Complexity: O(n)
