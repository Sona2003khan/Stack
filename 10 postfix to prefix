import java.util.Stack;

public class Stack_postfix_to_prefix_10 {

    // Function to convert postfix expression to prefix
    public static String postfix_to_prefix(String s) {
        Stack<String> st = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);

            if (Character.isLetterOrDigit(ch)) {
                // Operand: push to stack
                st.push(Character.toString(ch));
            } else {
                // Operator: pop two operands and combine with operator at front
                String top1 = st.pop();
                String top2 = st.pop();
                String both = ch + top2 + top1; // Prefix: operator + operand1 + operand2
                st.push(both);
            }
        }

        return st.pop(); // Final prefix expression
    }

    public static void main(String[] args) {
        String postfix = "abc*+d-";
        String prefix = postfix_to_prefix(postfix);
        System.out.println(prefix);  // Output: -+a*bc d
    }
}

/*
Time Complexity: O(n)
- Each character is processed once in a single pass (O(n)).
- String concatenation is linear due to small fixed number of operations (no nesting like infix).
- So, total time = O(n).

Space Complexity: O(n)
- Stack stores at most n elements.
- Final prefix expression size is O(n).

Note: Using StringBuilder would not help much here because expressions are built in fixed-size chunks.
*/
